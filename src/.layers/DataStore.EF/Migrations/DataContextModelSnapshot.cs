// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pharmacies.DataStore.EF;

namespace Pharmacies.DataStore.EF.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Pharmacies.Models.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Arrival")
                        .HasColumnName("Arrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("CBD")
                        .HasColumnName("CBD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CBG")
                        .HasColumnName("CBG")
                        .HasColumnType("numeric");

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Expiery")
                        .HasColumnName("Expiery")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasColumnName("ProducerName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProducersBatchID")
                        .IsRequired()
                        .HasColumnName("ProducersBatchID")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .HasColumnName("ProductName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductType")
                        .HasColumnName("ProductType")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("THC")
                        .HasColumnName("THC")
                        .HasColumnType("numeric");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Pharmacies.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActualName")
                        .IsRequired()
                        .HasColumnName("Actual")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("Display")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Pharmacies.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BatchId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("Key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("Pharmacies.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Contact")
                        .HasColumnName("Contact")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("Country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Logo")
                        .HasColumnName("Logo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("Phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Zip")
                        .HasColumnName("Zip")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("Pharmacies.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BatchId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Pharmacies.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsSuperUser")
                        .HasColumnName("IsSuperUser")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("text");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSuperUser = true,
                            Password = "AQAAAAEAACcQAAAAEA8tq+ZME4yxbhl9durT1Q5ulnpvLcP1ELJETel6qO9a3G0PeAusD6R5hX0CL1SI2g==",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Pharmacies.Models.Batch", b =>
                {
                    b.HasOne("Pharmacies.Models.Pharmacy", "Pharmacy")
                        .WithMany("Batches")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacies.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("Pharmacies.Models.Document", b =>
                {
                    b.HasOne("Pharmacies.Models.Batch", "Batch")
                        .WithMany("Documents")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacies.Models.Meta", b =>
                {
                    b.HasOne("Pharmacies.Models.Batch", "Batch")
                        .WithMany("Meta")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacies.Models.Template", b =>
                {
                    b.HasOne("Pharmacies.Models.Batch", "Batch")
                        .WithOne()
                        .HasForeignKey("Pharmacies.Models.Template", "BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacies.Models.User", b =>
                {
                    b.HasOne("Pharmacies.Models.Pharmacy", "Pharmacy")
                        .WithMany("Users")
                        .HasForeignKey("PharmacyId");
                });
#pragma warning restore 612, 618
        }
    }
}
